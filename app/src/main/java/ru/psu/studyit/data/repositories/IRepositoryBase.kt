package ru.psu.studyit.data.repositories

import io.reactivex.Flowable
import io.reactivex.Single

/********************************************************************************************************
 * Интерфейс описывает все методы бизнес-логики, которые могут применятся ко всем объектам-данным.      *
 * @author Селетков И.П. 2018 0816                                                                      *
 *******************************************************************************************************/
interface IRepositoryBase<T, K>
{
    /****************************************************************************************************
     * Список всех объектов.                                                                            *
     ***************************************************************************************************/
    fun get()                               : Single<List<T>>
    /****************************************************************************************************
     * Список всех объектов.                                                                            *
     ***************************************************************************************************/
    fun getFlowable()                       : Flowable<List<T>>
    /****************************************************************************************************
     * Поиск объекта по идентификатору.                                                                 *
     * @param id - идентификатор объекта.                                                               *
     * @return реактивный поток с объектом с данным идентификатором или исключение.                     *
     ***************************************************************************************************/
    fun get(
        id                                  : K
    )                                       : Single<T>
    /****************************************************************************************************
     * Поиск объекта по идентификатору.                                                                 *
     * @param id - идентификатор объекта.                                                               *
     * @return реактивный поток с объектом с данным идентификатором или бесконечное зависание.          *
     ***************************************************************************************************/
    fun getFlowable(
        id                                  : K
    )                                       : Flowable<T>
    /****************************************************************************************************
     * Поиск объекта по идентификатору.                                                                 *
     * @param id - идентификатор объекта.                                                               *
     * @return объект с данным идентификатором или null.                                                *
     ***************************************************************************************************/
    fun getSync(
        id                                  : K
    )                                       : T?
    /****************************************************************************************************
     * Создание объекта.                                                                                *
     ***************************************************************************************************/
    fun create(
        factory                             : () -> T
    )                                       : T
    /****************************************************************************************************
     * Сохранение объекта.                                                                              *
     * @param item - объект для сохранения.                                                             *
     ***************************************************************************************************/
    fun save(
        item                                : T
    )
    /****************************************************************************************************
     * Удаление объекта.                                                                                *
     * @param item - объект для удаления.                                                               *
     ***************************************************************************************************/
    fun delete(
        item                                : T
    )
    /****************************************************************************************************
     * Обновление объекта.                                                                              *
     * @param item - объект для обновления.                                                             *
     ***************************************************************************************************/
    fun update(
        item                                : T
    )
}