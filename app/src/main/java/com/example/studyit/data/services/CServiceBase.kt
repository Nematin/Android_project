package com.example.studyit.data.services

import com.example.studyit.data.dao.IDAOBase
import com.example.studyit.model.CBaseObject
import io.reactivex.Flowable
import io.reactivex.Single


/********************************************************************************************************
 * Класс-шаблон реализует стандартные методы бизнес-логики, которые могут применятся ко всем            *
 * объектам-данным.                                                                                     *
 * @author Селетков И.П. 2018 0816                                                                      *
 *******************************************************************************************************/
abstract class CServiceBase<
    T                                       : CBaseObject,
    K
    >
(
    protected val dao                       : IDAOBase<T, K>
)                                           : IServiceBase<T, K>
{
    /****************************************************************************************************
     * Список всех объектов.                                                                            *
     ***************************************************************************************************/
    override fun get()                      : Single<List<T>>
    {
        return dao.get()
    }
    /****************************************************************************************************
     * Список всех объектов.                                                                            *
     ***************************************************************************************************/
    override fun getFlowable()              : Flowable<List<T>>
    {
        return dao.getFlowable()
    }
    /****************************************************************************************************
     * Поиск объекта по идентификатору.                                                                 *
     * @param id - идентификатор объекта.                                                               *
     * @return реактивный поток с объектом с данным идентификатором или исключение.                     *
     ***************************************************************************************************/
    override fun get(
        id                                  : K
    )                                       : Single<T>
    {
        return dao.get(id)
    }
    /****************************************************************************************************
     * Поиск объекта по идентификатору.                                                                 *
     * @param id - идентификатор объекта.                                                               *
     * @return реактивный поток с объектом с данным идентификатором или бесконечное зависание.          *
     ***************************************************************************************************/
    override fun getFlowable(
        id                                  : K
    )                                       : Flowable<T>
    {
        return dao.getFlowable(id)
    }
    /****************************************************************************************************
     * Поиск объекта по идентификатору.                                                                 *
     * @param id - идентификатор объекта.                                                               *
     * @return объект с данным идентификатором или null.                                                *
     ***************************************************************************************************/
    override fun getSync(
        id                                  : K
    )                                       : T?
    {
        return dao.getSync(id)
    }
    /****************************************************************************************************
     * Создание объекта.                                                                                *
     ***************************************************************************************************/
    override fun create(
        factory                             : () -> T
    )                                       : T
    {
        val item                            = factory()
        return item
    }
    /****************************************************************************************************
     * Сохранение объекта.                                                                              *
     * @param item - объект для сохранения.                                                             *
     ***************************************************************************************************/
    override fun save(
        item                                : T
    )
    {
        dao.insert(item)
    }
    /****************************************************************************************************
     * Удаление объекта.                                                                                *
     * @param item - объект для удаления.                                                               *
     ***************************************************************************************************/
    override fun delete(
        item                                : T
    )
    {
        dao.delete(item)
    }
    /****************************************************************************************************
     * Обновление объекта.                                                                              *
     * @param item - объект для обновления.                                                             *
     ***************************************************************************************************/
    override fun update(
        item                                : T
    )
    {
        dao.update(item)
    }
}